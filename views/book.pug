html
    head
        meta(charset='utf-8')
        link(rel='preconnect' href='https://fonts.googleapis.com')
        link(rel='preconnect' href='https://fonts.gstatic.com' crossorigin='')
        link(href='https://fonts.googleapis.com/css2?family=Roboto:wght@100;300&display=swap' rel='stylesheet')
        link(rel='stylesheet', href='../font-awesome-4.7.0/css/font-awesome.min.css')
        style
            include form.css
            include book.css

    body
        div.book-id(hidden=true id='book-id')
            =book.id
        div.form
            form(role='form' onsubmit="return validateForm()" name='form')
                div.form-group
                    label(for='name') Название:
                    input#name.form-control(type='text', placeholder='Напишите название книги' name='name' value=book.title)
                div.form-group
                    label(for='author') Автор:
                    input#author.form-control(type='author', placeholder='Напишите автора книги' name='author' value=book.author)
                div.form-group
                    label(for='releaseDate') Дата выпуска:
                    input#releaseDate.form-control(type='date', name='releaseDate' value=book.releaseDate)
                div.reader
                    if (book.status === "В наличии")
                        i(class="fa fa-circle" id="green-circle")
                        =" " + book.status
                    else if (book.status === "У читателя")
                        i(class="fa fa-circle" id="grey-circle")
                        =" " + book.status
                        p="ФИО: " + book.reader.FIO
                        p="Дата возврата: " + book.reader.returnDate
                    else if (book.status === "Возврат просрочен")
                        i(class="fa fa-circle" id="red-circle")
                        =" " + book.status
                        p="ФИО: " + book.reader.FIO
                        p="Дата возврата: " + book.reader.returnDate
                button.btn.btn-primary(name="save", id="saveButton", type='button')
                    div.btn-text Сохранить
                if (book.status === 'В наличии')
                    button.btn.btn-primary(name="give", id="giveButton", type="button")
                        div.btn-text Выдать читателю
                else
                    button.btn.btn-primary(name="return", id="returnButton", type="button")
                        div.btn-text Вернуть книгу
        dialog(id='giveBookDialog')
            form(role='formGive' name='formGive')
                div.form-group
                    label(for='FIO') ФИО:
                    input#FIO.form-control(type='text', placeholder='Напишите ФИО читателя' name='FIO')
                div.form-group
                    label(for='returnDate') Дата возврата:
                    input#returnDate.form-control(type='date', name='returnDate')
                button.btn.btn-primary(name="add", id="submitButton", type="button")
                    div.btn-text Выдать книгу
                button.btn.btn-cancel(type="cancel", name="cancel", value="cancel", id="cancelButton")
                    div.btn-cancel-text Отмена
        script.
            function validateForm() {
                const a = document.forms["form"]['name'].value;
                const b = document.forms["form"]['author'].value;
                const c = document.forms["form"]['releaseDate'].value;
                console.log(typeof c)
              if (a === '' || b  === '' || c === '' ) {
                    alert('Все поля должны быть заполнены');
                    return false;
                } else {
                return true
              }
            }
            const giveBook = document.getElementById('giveButton');
            const giveBookDialog = document.getElementById('giveBookDialog');
            const outputBox = document.querySelector('output');
            const submitButton = document.getElementById('submitButton');
            const saveButton = document.getElementById('saveButton');
            const returnButton = document.getElementById('returnButton');
            const cancelButton = document.getElementById('cancelButton');



            // If a browser doesn't support the dialog, then hide the
            // dialog contents by default.
            if (typeof giveBookDialog.showModal !== 'function') {
              giveBookDialog.hidden = true;
              /* a fallback script to allow this dialog/form to function
                 for legacy browsers that do not support <dialog>
                 could be provided here.
              */
            }
            // "Update details" button opens the <dialog> modally
            if (giveBook) {
              giveBook.addEventListener('click', () => {
                if (typeof giveBookDialog.showModal === "function") {
                  saveData();
                  giveBookDialog.showModal();
                } else {
                  outputBox.value = "Sorry, the <dialog> API is not supported by this browser.";
                }
              });
            }
            // "Confirm" button of form triggers "close" on dialog because of [method="dialog"]
            submitButton.addEventListener('click', async () => {

                const returnDate = document.forms["formGive"]['returnDate'].value;
                const data = {
                  id: document.getElementById('book-id').textContent,
                  reader: {
                    "FIO": document.forms["formGive"]['FIO'].value,
                    "returnDate": returnDate,
                  }
                }
                if(new Date(returnDate) < new Date("1000-02-02")){
                  alert("Введите корректный год")
                  return
                }
                await fetch('http://localhost:3000/give-to-reader', {
                  method: 'POST', // or 'PUT'
                  headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                  },
                  body: JSON.stringify(data),
                })
                  .then((response) => response.json())
                  .then((data) => {
                    console.log('Success:', data);
                  })
                  .catch((error) => {
                    console.error('Error:', error);
                  });
              location.href = "http://localhost:3000/"
            });
            async function saveData() {
              const data = {
                id: document.getElementById('book-id').textContent,
                "title": document.forms["form"]['name'].value,
                "author": document.forms["form"]['author'].value,
                "releaseDate": document.forms["form"]['releaseDate'].value,
              }
              await fetch('http://localhost:3000/edit-book', {
                method: 'PUT', // or 'PUT'
                headers: {
                  'Accept': 'application/json',
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify(data),
              })
                .then((response) => response.json())
                .then((data) => {
                  console.log('Success:', data);
                })
                .catch((error) => {
                  console.error('Error:', error);
                });
            }



            // "Confirm" button of form triggers "close" on dialog because of [method="dialog"]
            saveButton.addEventListener('click', async () => {

              await saveData();
              location.href = "http://localhost:3000/"
            });

            returnButton.addEventListener('click', async () => {
              console.log(1)
              const data = {
                id: document.getElementById('book-id').textContent,
              }
              await fetch('http://localhost:3000/return-book', {
                method: 'POST', // or 'PUT'
                headers: {
                  'Accept': 'application/json',
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify(data),
              })
                .then((response) => response.json())
                .then((data) => {
                  console.log('Success:', data);
                })
                .catch((error) => {
                  console.error('Error:', error);
                });
              location.href = "http://localhost:3000/"
            });